// Code generated by MockGen. DO NOT EDIT.
// Source: ./infrastructure/datastore/datastore.go
//
// Generated by this command:
//
//	mockgen -source=./infrastructure/datastore/datastore.go -destination=./mock/datastore/mock_datastore.go -package=datastore
//

// Package datastore is a generated GoMock package.
package datastore

import (
	reflect "reflect"

	repository "github.com/OLIENTTECH/backend-challenges/domain/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockDataStore is a mock of DataStore interface.
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore.
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance.
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// Shop mocks base method.
func (m *MockDataStore) Shop() repository.Shop {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shop")
	ret0, _ := ret[0].(repository.Shop)
	return ret0
}

// Shop indicates an expected call of Shop.
func (mr *MockDataStoreMockRecorder) Shop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shop", reflect.TypeOf((*MockDataStore)(nil).Shop))
}

// User mocks base method.
func (m *MockDataStore) User() repository.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User")
	ret0, _ := ret[0].(repository.User)
	return ret0
}

// User indicates an expected call of User.
func (mr *MockDataStoreMockRecorder) User() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockDataStore)(nil).User))
}
