// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain/repository/shop.go
//
// Generated by this command:
//
//	mockgen -source=./domain/repository/shop.go -destination=./mock/repository/mock_shop.go -package=repository
//

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	model "github.com/OLIENTTECH/backend-challenges/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockShop is a mock of Shop interface.
type MockShop struct {
	ctrl     *gomock.Controller
	recorder *MockShopMockRecorder
}

// MockShopMockRecorder is the mock recorder for MockShop.
type MockShopMockRecorder struct {
	mock *MockShop
}

// NewMockShop creates a new mock instance.
func NewMockShop(ctrl *gomock.Controller) *MockShop {
	mock := &MockShop{ctrl: ctrl}
	mock.recorder = &MockShopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShop) EXPECT() *MockShopMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockShop) Get(ctx context.Context, shopID string) (*model.Shop, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, shopID)
	ret0, _ := ret[0].(*model.Shop)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockShopMockRecorder) Get(ctx, shopID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockShop)(nil).Get), ctx, shopID)
}
